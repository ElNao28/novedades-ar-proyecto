name: WebApp CI/CD Cypress # Nombre del flujo de trabajo

# Configuración de los desencadenadores
on:
  push:
    branches:
      - prueba3
      - luis-jair
      - mabel
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Permisos para GitHub Actions
permissions:
  contents: read

jobs:
  Pruebas:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Node.js (para Angular y Cypress)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'  # Configura el caché para npm automáticamente

      # 3. Instalar dependencias del proyecto
      - name: Install dependencies
        run: npm i

      # 4. Levantar la aplicación de Angular en segundo plano
      - name: Start Angular App
        run: npm run start &
        env:
          CI: true

      # 5. Esperar a que el servidor esté arriba
      - name: Wait for Angular App to be available
        run: npx wait-on http://localhost:4200
        timeout-minutes: 3  # Agrega un tiempo de espera de 3 minutos para evitar esperas indefinidas

      # 6. Ejecutar pruebas e2e con Cypress
      - name: Run Cypress E2E Tests
        run: npx cypress run --headed --browser chrome --reporter spec
        env:
          CYPRESS_BASE_URL: http://localhost:4200
          CI: true

      # 7. Guardar resultados de Cypress como artefactos
      - name: Archive Cypress Test Results
        if: always() # Ejecuta este paso incluso si el anterior falla
        uses: actions/upload-artifact@v2
        with:
          name: cypress-results
          path: cypress/reports

      # 8. Subir screenshots y videos en caso de fallo
      - name: Upload Cypress Screenshots and Videos
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots-videos
          path: cypress/screenshots,cypress/videos
