name: PWA CI/CD Workflow # Nombre del flujo de trabajo

# Disparadores para el workflow
on:
  push:
    branches:
      - prueba3 # Ejecutar en cada push a las ramas especificadas
      - luis-jair
      - mabel
  pull_request:
    branches:
      - main

  workflow_dispatch:

# Permisos para GitHub Actions
permissions:
  contents: read

jobs:
  Pruebas:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Node.js (para Angular y Jest)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      # 3. Instalar dependencias del proyecto
      - name: Install dependencies
        run: npm ci

        # 4. Levantar la aplicación de Angular
      - name: Start Angular App
        run: npm run start &
        env:
          CI: true

      # # 5. Esperar a que el servidor esté arriba
      - name: Wait for Angular App to be available
        run: npx wait-on http://localhost:4200

      # # 8. Ejecutar pruebas e2e con cypress
      - name: e2e cypress
        run: npx cypress run

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: Pruebas # Asegura que este job solo se ejecuta si 'Pruebas' ha sido exitoso
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/prueba3'
    # Asegura que solo se ejecute en la rama main

    steps:
      # 1. Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. Desplegar la aplicación a producción
      - name: Deploy to Production Vercel
        run: |
          echo "Desplegando aplicación a producción..."
          npx vercel --prod --yes --token ${{ secrets.TOKEN_VERCEL }}

        